warning: LF will be replaced by CRLF in package-lock.json.
The file will have its original line endings in your working directory.
warning: LF will be replaced by CRLF in package.json.
The file will have its original line endings in your working directory.
[1mdiff --git a/src/lsp/completion/CobolCompletionItemFactory.ts b/src/lsp/completion/CobolCompletionItemFactory.ts[m
[1mindex 4c7c3fb..5f3f4b2 100644[m
[1m--- a/src/lsp/completion/CobolCompletionItemFactory.ts[m
[1m+++ b/src/lsp/completion/CobolCompletionItemFactory.ts[m
[36m@@ -1,6 +1,5 @@[m
 import { CompletionItem, TextDocument } from "vscode-languageserver";[m
 import { ParserCobol } from "../../cobol/parsercobol";[m
[31m-import { VarDeclarationCompletion } from "./VarDeclarationCompletion";[m
 import { PerformCompletion } from "./PerformCompletion";[m
 import { MoveCompletion } from "./MoveCompletion";[m
 import { ToCompletion } from "./ToCompletion";[m
[36m@@ -18,6 +17,8 @@[m [mimport { ExitPerformCompletion } from "./ExitPerformCompletion";[m
 import { ExitCycleCompletion } from "./ExitCycleCompletion";[m
 import { FlagCompletion } from "./FlagCompletion";[m
 import { ToTrueCompletion } from "./ToTrueCompletion";[m
[32m+[m[32mimport { PictureCompletion } from "./PictureCompletion";[m
[32m+[m[32mimport { ValueCompletion } from "./ValueCompletion";[m
 [m
 /**[m
  * Class to generate LSP Completion Items for Cobol language[m
[36m@@ -113,8 +114,11 @@[m [mexport class CobolCompletionItemFactory {[m
    * Creates completion items for Cobol variables[m
    */[m
   private createVariableCompletions(): CompletionItem[] {[m
[31m-    if (!this.isVarPictureDeclared()) {[m
[31m-      return this.generate(new VarDeclarationCompletion());[m
[32m+[m[32m    if (!this.isPictureDeclared()) {[m
[32m+[m[32m      return this.generate(new PictureCompletion());[m
[32m+[m[32m    }[m
[32m+[m[32m    if (!this.isValueDeclared() && !this.lineText.trim().endsWith(".")) {[m
[32m+[m[32m      return this.generate(new ValueCompletion());[m
     }[m
     if (this.isFlagParent()) {[m
       return this.generate(new FlagCompletion());[m
[36m@@ -146,10 +150,17 @@[m [mexport class CobolCompletionItemFactory {[m
   /**[m
    * Returns true if the var Picture is declared on the current line[m
    */[m
[31m-  private isVarPictureDeclared(): boolean {[m
[32m+[m[32m  private isPictureDeclared(): boolean {[m
     return this.lineText.toUpperCase().includes(" PIC ");[m
   }[m
 [m
[32m+[m[32m  /**[m
[32m+[m[32m   * Returns true if the var Value is declared on the current line[m
[32m+[m[32m   */[m
[32m+[m[32m  private isValueDeclared(): boolean {[m
[32m+[m[32m    return this.lineText.toUpperCase().includes(" VALUE ");[m
[32m+[m[32m  }[m
[32m+[m
   /**[m
    * Returns true if the current line represents a 'if'[m
    */[m
[1mdiff --git a/src/lsp/completion/FlagCompletion.ts b/src/lsp/completion/FlagCompletion.ts[m
[1mindex 2b36cb5..5e68efa 100644[m
[1m--- a/src/lsp/completion/FlagCompletion.ts[m
[1m+++ b/src/lsp/completion/FlagCompletion.ts[m
[36m@@ -1,6 +1,7 @@[m
 import { CompletionItemKind, CompletionItem, InsertTextFormat, TextEdit } from "vscode-languageserver";[m
 import { CompletionInterface } from "./CompletionInterface";[m
 import { CompletionUtils } from "../commons/CompletionUtils";[m
[32m+[m[32mimport { CobolVariable } from "./CobolVariable";[m
 [m
 // Cobol column for 'VALUE' clause declaration[m
 const VALUE_COLUMN = 51;[m
[36m@@ -11,11 +12,12 @@[m [mconst VALUE_COLUMN = 51;[m
 export class FlagCompletion implements CompletionInterface {[m
 [m
     public generate(line: number, _column: number, lines: string[]): CompletionItem[] {[m
[31m-        let splittedParent = this.splitParentVariableInfo(lines[line]);[m
[32m+[m[32m        let currentLineText = lines[line];[m
[32m+[m[32m        let variable = CobolVariable.parseLine(currentLineText);[m
         let variableName, varsim, varnao = '';[m
[31m-        let posprefixo = splittedParent[1].indexOf("-");[m
[31m-        let prefixoName = splittedParent[1].substring(0, posprefixo + 1);[m
[31m-        variableName = splittedParent[1].substring(posprefixo + 1);[m
[32m+[m[32m        let posprefixo = variable.getName().indexOf("-");[m
[32m+[m[32m        let prefixoName = variable.getName().substring(0, posprefixo + 1);[m
[32m+[m[32m        variableName = variable.getName().substring(posprefixo + 1);[m
         if (variableName.length == 3) {[m
             varsim = 'sim';[m
             varnao = 'nao';[m
[36m@@ -24,7 +26,7 @@[m [mexport class FlagCompletion implements CompletionInterface {[m
             varnao = '-nao';[m
         }[m
         if (prefixoName.toLowerCase() != "w-") {[m
[31m-            variableName = splittedParent[1];[m
[32m+[m[32m            variableName = variable.getName();[m
         }[m
         let firstWordColumn = this.firstWordColumn(lines[line]);[m
         let flagsText = this.buildFlagsText(firstWordColumn, variableName, varsim, varnao);[m
[36m@@ -33,26 +35,6 @@[m [mexport class FlagCompletion implements CompletionInterface {[m
         return [item];[m
     }[m
 [m
[31m-    /**[m
[31m-     * Split parent variable information into an array[m
[31m-     *[m
[31m-     * @param parentVariable parent variable line text[m
[31m-     */[m
[31m-    private splitParentVariableInfo(parentVariable: string): string[] {[m
[31m-        let parentVariableLineText = this.removeDuplicateWhitespaces(parentVariable);[m
[31m-        let splittedParent = parentVariableLineText.split(" ");[m
[31m-        return splittedParent;[m
[31m-    }[m
[31m-[m
[31m-    /**[m
[31m-     * Removes duplicate whitespaces from the target string[m
[31m-     *[m
[31m-     * @param currentText[m
[31m-     */[m
[31m-    private removeDuplicateWhitespaces(currentText: string): string {[m
[31m-        return currentText.trimLeft().replace(/\s+/g, ' ');[m
[31m-    }[m
[31m-[m
     /**[m
      * Returns the column of the first word on the specified line[m
      *[m
[1mdiff --git a/src/lsp/completion/VarDeclarationCompletion.ts b/src/lsp/completion/VarDeclarationCompletion.ts[m
[1mdeleted file mode 100644[m
[1mindex 1030a5d..0000000[m
[1m--- a/src/lsp/completion/VarDeclarationCompletion.ts[m
[1m+++ /dev/null[m
[36m@@ -1,26 +0,0 @@[m
[31m-import { CompletionItemKind, CompletionItem, InsertTextFormat } from "vscode-languageserver";[m
[31m-import { CompletionInterface } from "./CompletionInterface";[m
[31m-import { CompletionUtils } from "../commons/CompletionUtils";[m
[31m-[m
[31m-// Cobol column for 'PIC' clause declaration[m
[31m-const PIC_COLUMN_DECLARATION = 35;[m
[31m-/**[m
[31m- * Class to generate LSP Completion Items for Cobol variable declarations[m
[31m- */[m
[31m-export class VarDeclarationCompletion implements CompletionInterface {[m
[31m-[m
[31m-    public generate(_line: number, column: number, _lines: string[]): CompletionItem[] {[m
[31m-        let text = CompletionUtils.fillMissingSpaces(PIC_COLUMN_DECLARATION, column - 1) + "pic is $1($2)$3    value is $4     ${5:comp-x}.";[m
[31m-        return [{[m
[31m-            label: 'Completar declaraÃ§Ã£o de variÃ¡vel',[m
[31m-            detail: 'SerÃ£o inseridas clÃ¡usulas PIC e VALUE IS nos lugares apropriados.',[m
[31m-            insertText: text,[m
[31m-            insertTextFormat: InsertTextFormat.Snippet,[m
[31m-            filterText: "pic",[m
[31m-            preselect: true,[m
[31m-            commitCharacters: ['x', '9', 'z', 'b', ' '],[m
[31m-            kind: CompletionItemKind.Variable[m
[31m-        }];[m
[31m-    }[m
[31m-[m
[31m-}[m
\ No newline at end of file[m
[1mdiff --git a/src/test/extension.test.ts b/src/test/extension.test.ts[m
[1mindex 1b4e1c7..791388d 100644[m
[1m--- a/src/test/extension.test.ts[m
[1m+++ b/src/test/extension.test.ts[m
[36m@@ -1,6 +1,7 @@[m
 [m
 import { expect } from 'chai';[m
 import 'mocha';[m
[32m+[m[32mimport { CobolVariable, Type } from '../lsp/completion/CobolVariable';[m
 [m
 [m
 [m
[36m@@ -10,4 +11,103 @@[m [mdescribe('Generic test', () => {[m
     expect(1).to.equal(1);[m
   });[m
 [m
[31m-});[m
\ No newline at end of file[m
[32m+[m[32m});[m
[32m+[m
[32m+[m
[32m+[m[32mdescribe('Cobol variable test', () => {[m
[32m+[m
[32m+[m[32m  it('Check Cobol variable parsing', () => {[m
[32m+[m[32m    //[m
[32m+[m[32m    let variable = CobolVariable.parseLine("           05 w-var               pic is 9(100) ");[m
[32m+[m[32m    expect(5).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is 9(100) ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is 9(100)v9 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Decimal).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is 99v99 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Decimal).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is s99v99 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Decimal).to.equal(variable.getType());[m
[32m+[m[32m    expect(true).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is -99 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(true).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is -99 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(true).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic is zz9 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               pic zz9 ");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("25 MINHA-VARIAVEL               pic -bbbbb ");[m
[32m+[m[32m    expect(25).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("MINHA-VARIAVEL").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Integer).to.equal(variable.getType());[m
[32m+[m[32m    expect(true).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("           10 w-var               PIC 9(100)v9");[m
[32m+[m[32m    expect(10).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-var").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Decimal).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(false).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("05 w-varr3             pic xxx         value is spaces.");[m
[32m+[m[32m    expect(5).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-varr3").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Alphanumeric).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m    //[m
[32m+[m[32m    variable = CobolVariable.parseLine("05 w-varr3             pic xxx");[m
[32m+[m[32m    expect(5).to.equal(variable.getLevel());[m
[32m+[m[32m    expect("w-varr3").to.equal(variable.getName());[m
[32m+[m[32m    expect(Type.Alphanumeric).to.equal(variable.getType());[m
[32m+[m[32m    expect(false).to.equal(variable.isAllowNegative());[m
[32m+[m[32m    expect(true).to.equal(variable.isDisplay());[m
[32m+[m[32m  });[m
[32m+[m
[32m+[m[32m});[m
