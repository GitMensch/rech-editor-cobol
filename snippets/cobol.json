{
	"LESS THAN": {
		"prefix": "LE",
		"body": "IS LESS THAN ${0:<var>}"
	},
	"EQUAL TO": {
		"prefix": "EQ",
		"body": "IS EQUAL TO ${0:<var>}"
	},
	"GREATER THAN": {
		"prefix": "GT",
		"body": "IS GREATER THAN ${0:<var>}"
	},
	"IS GREATER THAN": {
		"prefix": "GR",
		"body": "IS GREATER THAN ${0:<var>}"
	},
	"NOT LESS THAN": {
		"prefix": "NLE",
		"body": "IS NOT LESS THAN ${0:<var>}"
	},
	"NOT EQUAL TO": {
		"prefix": "NQ",
		"body": "IS NOT EQUAL TO ${0:<var>}"
	},
	"NOT GREATER THAN": {
		"prefix": "NGT",
		"body": "IS NOT GREATER THAN ${0:<var>}"
	},
	"IS NOT GREATER THAN": {
		"prefix": "NGR",
		"body": "IS NOT GREATER THAN ${0:<var>}"
	},
	"IF LESS THAN": {
		"prefix": "IFL",
		"body": [
			"IF ${1:<var1>} IS LESS THAN ${2:<var2>}",
			"   ${0:<body>}",
			"END-IF."
		]
    },
	"IF BOOLEAN": {
		"prefix": "IFB",
		"body": [
			"IF ${1:<tst1>}",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF GREATER THAN": {
		"prefix": "IFG",
		"body": [
			"IF ${1:<var1>} IS GREATER THAN ${2:<var2>}",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF EQUAL TO": {
		"prefix": "IFE",
		"body": [
			"IF ${1:<var1>} IS EQUAL TO ${2:<var2>}",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF NOT EQUAL TO": {
		"prefix": "IFN",
		"body": [
			"IF ${1:<var1>} IS NOT EQUAL TO ${2:<var2>}",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF EQUAL TO LOW-VALUES": {
		"prefix": "IFW",
		"body": [
			"IF ${1:<var>} IS EQUAL TO LOW-VALUES",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF EQUAL TO SPACES": {
		"prefix": "IFS",
		"body": [
			"IF ${1:<var>} IS EQUAL TO SPACES",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"IF EQUAL TO ZEROS": {
		"prefix": "IFZ",
		"body": [
			"IF ${1:<var>} IS EQUAL TO ZEROS",
			"   ${0:<body>}",
			"END-IF."
		]
	},
	"MOVE LOW-VALUES TO": {
		"prefix": "ML",
		"body": "MOVE LOW-VALUES TO ${0:<var1>},"
	},
	"MOVE HIGH-VALUES TO": {
		"prefix": "MH",
		"body": "MOVE HIGH-VALUES TO ${0:<var1>},"
	},
	"MOVE SPACES TO": {
		"prefix": "MS",
		"body": "MOVE SPACES TO ${0:<var1>},"
	},
	"MOVE ZEROS TO": {
		"prefix": "MZ",
		"body": "MOVE ZEROS TO ${0:<var1>},"
	},
	"GO TO": {
		"prefix": "GO",
		"body": "GO TO ${0:<paragraph>},"
	},
	"ADD 1 TO": {
		"prefix": "AD1",
		"body": "ADD 1 TO ${0:<var>},"
	},
	"SUBTRACT 1 FROM": {
		"prefix": "SU1",
		"body": "SUBTRACT 1 FROM ${0:<var>},"
	},
	"COMPUTE": {
		"prefix": "CP",
		"body": "COMPUTE ${1:<var>} = ${0:<formula>},"
	},
	"COMPUTE ROUNDED =": {
		"prefix": "CR",
		"body": "COMPUTE ${1:<var>} ROUNDED = ${0:<formula>},"
	},
	"VALUE IS": {
		"prefix": "VL",
		"body": "VALUE IS ${0:<value>}."
	},
	"INITIALIZE": {
		"prefix": "IN",
		"body": "INITIALIZE ${0:<var>},"
	},
	"ZEROS": {
		"prefix": "ZE",
		"body": "ZEROS"
	},
	"ZEROS ": {
		"prefix": "ZR",
		"body": "ZEROS"
	},
	"SPACES": {
		"prefix": "SP",
		"body": "SPACES"
	},
	"LOW-VALUES": {
		"prefix": "LV",
		"body": "LOW-VALUES"
	},
	"LOW-VALUES ": {
		"prefix": "LO",
		"body": "LOW-VALUES"
	},
	"HIGH-VALUES": {
		"prefix": "HV",
		"body": "HIGH-VALUES"
	},
	"HIGH-VALUES ": {
		"prefix": "HI",
		"body": "HIGH-VALUES"
	},
	"BLANK WHEN ZERO": {
		"prefix": "BWZ",
		"body": "BLANK WHEN ZEROS"
	},
	"PERFORM VARYING": {
		"prefix": "PB",
		"body": [
			"PERFORM                WITH TEST BEFORE",
			"   VARYING             ${1:<index>} FROM ${2:<start>} BY ${3:increment}",
			"      UNTIL            ${1:<index>} ${4:<stop_condition>}",
			"   ${0:<body>}",
			"END-PERFORM."
		]
	},
	"EXIBE-MENSAGEM": {
		"prefix": "EXIBE-MENSAGEM",
		"body": [
			"MOVE \"${0:<text>}\" TO WME-LIT,",
			"PERFORM EXIBE-MENSAGEM,"
		]
	},
	"READ KEY ARQ-COMANDO": {
		"prefix": "READ KEY",
		"body": [
			"MOVE \"READ ${1:XTABEL} KEY ${2:XXXX-CHA} IGNORE LOCK\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${3:MK-CHA},"
		]
	},
	"INIPRE ARQ-COMANDO": {
		"prefix": "INIPRE",
		"body": [
			"MOVE \"INIPRE ${1:XTABEL}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${2:MK-CHA},"
		]
	},
	"PREPARE ARQ-COMANDO": {
		"prefix": "PREPARE",
		"body": [
			"MOVE \"PREPARE ${1:XTABEL} ${2:XXXX-CHA}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${3:MK-CHA},"
		]
	},
	"FETCH ARQ-COMANDO": {
		"prefix": "FETCH",
		"body": [
			"MOVE \"FETCH ${1:XTABEL} IGNORE LOCK\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${2:MK-CHA},"
		]
	},
	"WRITE ARQ-COMANDO": {
		"prefix": "WRITE",
		"body": [
			"MOVE \"WRITE ${1:XTABEL} ${2:XREG-XXX}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${3:MK-CHA},"
		]
	},
	"REWRITE ARQ-COMANDO": {
		"prefix": "REWRITE",
		"body": [
			"MOVE \"REWRITE ${1:XTABEL} ${2:XREG-XXX}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${3:MK-CHA},"
		]
	},
	"RE/WRITE ARQ-COMANDO": {
		"prefix": "RE/WRITE",
		"body": [
			"MOVE \"RE/WRITE ${1:XTABEL} ${2:XREG-XXX}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${3:MK-CHA},"
		]
	},
	"DELETE ARQ-COMANDO": {
		"prefix": "DELETE",
		"body": [
			"MOVE \"DELETE ${1:XTABEL} RECORD\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${2:MK-CHA},"
		]
	},
	"UNLOCK ARQ-COMANDO": {
		"prefix": "UNLOCK",
		"body": [
			"MOVE \"UNLOCK ${1:XTABEL}\" TO WARQ-CMD,",
			"PERFORM ARQ-COMANDO-${2:MK-CHA},"
		]
	},
	"RECHDOC" : {
		"prefix": "RECHDOC",
		"body": [
			"      *>/**",
			"      *> ${0:Comentário da rotina}",
			"      *>",
			"      *> @param  XXXXXX-XXX parâmetro",
			"      *> @return XXXXXX-XXX Saída",
			"      *> @throws XXXXXX-XXX Erro",
			"      *>*/"
		],
		"description": "Documentação RechDoc"
	},
	"@param" : {
		"prefix": "@param",
		"body": "@param  ${1:XXXXXX-XXX} ${0:Descrição do parâmetro}",
		"description": "RechDoc de parâmetro"
	},
	"@return" : {
		"prefix": "@return",
		"body": "@return ${1:XXXXXX-XXX} ${0:Descrição do retorno}",
		"description": "RechDoc de retorno"
	},
	"@throws" : {
		"prefix": "@throws",
		"body": "@throws ${1:XXXXXX-XXX} ${0:Descrição do retorno}",
		"description": "RechDoc de status de retorno"
	},
	"@enum" : {
		"prefix": "@enum",
		"body": "   @enum ${1:XXXXXX-XXX} ${0:Descrição do enumerado}",
		"description": "RechDoc de enumerado"
	},
	"@optional" : {
		"prefix": "@optional",
		"body": "   @optional",
		"description": "RechDoc de parâmetro opcional"
	},
	"@default" : {
		"prefix": "@default",
		"body": "   @default",
		"description": "RechDoc de valor default"
	},
	"SEARCH" : {
		"prefix": "SEARCH",
		"body": [
			"      *>-> Busca ... na tabela de ...",
			"           SEARCH ALL             <Nome_Tabela>",
			"      *>-> Se chegou ao fim da busca",
			"              AT END",
			"                 ...",
			"      *>-> Se encontrou",
			"              WHEN <condição>",
			"                 NEXT             SENTENCE,",
			"           END-SEARCH."
			],
		"description": "Busca em uma tabela"
	},
	"STRING" : {
		"prefix": "STRING",
		"body": [
			"STRING                 ${1:<var1>}, ${2:<var2>},",
			"   DELIMITED BY SIZE INTO ${0:<var>}."
		],
		"description": "STRING DELIMITED BY SIZE"
	},
	"STRING WITH POINTER" : {
		"prefix": "STRING",
		"body": [
			"STRING                 ${1:<var1>}, ${2:<var2>},",
			"   DELIMITED BY SIZE INTO ${2:<var>}",
			"      WITH POINTER     ${0:<ponteiro>.}"
		],
		"description": "STRING DELIMITED/WITH POINTER"
	},
	"INITIALIZE1" : {
		"prefix": "INITIALIZE",
		"body": [
			"INITIALIZE             ${1:<var>}",
			"   REPLACING           ALPHANUMERIC DATA BY SPACES."
			],
		"description": "INITIALIZE ... REPLACING ALPHANUMERIC"
	},
	"FUN LENGTH" : {
		"prefix": "FUN LENGTH",
		"body": "FUNCTION LENGTH (${0:<var>})",
		"description": "Retorna um inteiro igual ao comprimento da variável em argument-1"
	},
	"FUN DATE" : {
		"prefix": "FUN DATE",
		"body": "FUNCTION CURRENT-DATE",
		"description": "Retorna em um inteiro 9(12) a data atual. Formato AAAAMMDDHHMM"
	},
	"FUN UPPER" : {
		"prefix": "FUN UPPER",
		"body": "FUNCTION UPPER-CASE (${0:<var>})",
		"description": "Retorna o alfanuméricos de argument-1 em maiúsculas"
	},
	"FUN LOWER" : {
		"prefix": "FUN LOWER",
		"body": "FUNCTION LOWER-CASE (${0:<var>})",
		"description": "Retorna o alfanuméricos de argument-1 em minúsculas"
	},
	"FUN MOD" : {
		"prefix": "FUN MOD",
		"body": "FUNCTION MOD (${0:<var>})",
		"description": "Retorna o resto da divisão entre argument-1 e argument-2"
	},
	"FUN INTEGER" : {
		"prefix": "FUN INTEGER",
		"body": "FUNCTION INTEGER (${0:<var>})",
		"description": "Retorna o maior valor inteiro antes de argument-1"
	},
	"FUN COMP" : {
		"prefix": "FUN COMP",
		"body": "FUNCTION WHEN-COMPILED",
		"description": "Retorna data e hora que o programa foi compilado. Formato YYYYMMDDHHMMSSCC-FUSO"
	},
	"FUN NUMVAL" : {
		"prefix": "FUN NUMVAL",
		"body": "FUNCTION NUMVAL (${0:<var>})",
		"description": "Retorna um valor numérico para o valor alfanuméricos de argument-1"
	},
	"FUN LOG10" : {
		"prefix": "FUN LOG10",
		"body": "FUNCTION LOG10 (${0:<var>})",
		"description": "Retorna um valor numérico aproximado para o logaritmo de base 10 de argument-1"
	},
	"FUN REM" : {
		"prefix": "FUN REM",
		"body": "FUNCTION REM (${0:<var>})",
		"description": "Retorna o resto da divisão entre argument-1 e argument-2"
	},
	"FUN ABS" : {
		"prefix": "FUN ABS",
		"body": "FUNCTION ABS (${0:<var>})",
		"description": "Retorna o valor absoluto (inteiro) de argument-1"
	},
	"FUN SQRT" : {
		"prefix": "FUN SQRT",
		"body": "FUNCTION SQRT (${0:<var>})",
		"description": "Retorna a raiz de argument-1"
	},
	"VSTART NEXT" : {
		"prefix": "VSTART NEXT",
		"body": [
			"      *>-> Varre o virtual de ${1:<descrição do virtual>}",
			"           MOVE    LOW-VALUES TO  W-${2:XXX}-REG.",
			"           PERFORM                ${2:XXX}-START-NLESS.",
			"           PERFORM                UNTIL EXIT",
			"              PERFORM             ${2:XXX}-READ-NEXT,",
			"              IF NOT ${2:XXX}-FS-OK",
			"                 EXIT             PERFORM,",
			"              END-IF,",
			"              $0",
			"           END-PERFORM."
		],
		"description": "Loop de leitura em virtual - NEXT"
	},
	"VSTART PREVIOUS" : {
		"prefix": "VSTART PREVIOUS",
		"body": [
			"      *>-> Varre o virtual de ${1:<descrição do virtual>}",
			"           MOVE    HIGH-VALUES TO W-${2:XXX}-REG.",
			"           PERFORM                ${2:XXX}-START-NGREATER.",
			"           PERFORM                UNTIL EXIT",
			"              PERFORM             ${2:XXX}-READ-PREVIOUS,",
			"              IF NOT ${2:XXX}-FS-OK",
			"                 EXIT             PERFORM,",
			"              END-IF,",
			"              $0",
			"           END-PERFORM."
		],
		"description": "Loop de leitura em virtual - PREVIOUS"
	}
}