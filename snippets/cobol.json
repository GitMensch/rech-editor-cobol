{
	"move low-values to": {
		"prefix": "ml",
		"body": "move low-values to ${0:<var1>},"
	},
	"move high-values to": {
		"prefix": "mh",
		"body": "move high-values to ${0:<var1>},"
	},
	"move spaces to": {
		"prefix": "ms",
		"body": "move spaces to ${0:<var1>},"
	},
	"move zeros to": {
		"prefix": "mz",
		"body": "move zeros to ${0:<var1>},"
	},
	"add 1 to": {
		"prefix": "ad1",
		"body": "add 1 to ${0:<var>},"
	},
	"subtract 1 from": {
		"prefix": "su1",
		"body": "subtract 1 from ${0:<var>},"
	},
	"compute": {
		"prefix": "cp",
		"body": "compute ${1:<var>} = ${0:<formula>},"
	},
	"compute rounded =": {
		"prefix": "cr",
		"body": "compute ${1:<var>} rounded = ${0:<formula>},"
	},
	"value is": {
		"prefix": "vl",
		"body": "value is ${0:<value>}."
	},
	"initialize": {
		"prefix": "in",
		"body": "initialize ${0:<var>},"
	},
	"filler" : {
		"prefix": "filler",
		"body": "filler"
	},
	"true" : {
		"prefix": "true",
		"body": "true"
	},
	"zeros": {
		"prefix": "ze",
		"body": "zeros"
	},
	"zeros ": {
		"prefix": "zr",
		"body": "zeros"
	},
	"spaces": {
		"prefix": "sp",
		"body": "spaces"
	},
	"low-values": {
		"prefix": "lv",
		"body": "low-values"
	},
	"low-values ": {
		"prefix": "low-values",
		"body": "low-values"
	},
	"high-values": {
		"prefix": "hv",
		"body": "high-values"
	},
	"high-values ": {
		"prefix": "high-values",
		"body": "high-values"
	},
	"blank when zeros": {
		"prefix": "bwz",
		"body": "blank when zeros"
	},
	"rechdoc" : {
		"prefix": "RechDoc",
		"body": [
			"      *>/**",
			"      *> ${0:Paragraph documentation}",
			"      *>",
			"      *> @param XXXXXX-XXX parameter description",
			"      *> @return XXXXXX-XXX result description",
			"      *> @throws XXXXXX-XXX error description",
			"      *>*/"
		],
		"description": "RechDoc documentation"
	},
	"@param" : {
		"prefix": "RechDoc @param",
		"body": "@param ${1:XXXXXX-XXX} ${0:parameter description}",
		"description": "RechDoc parameter"
	},
	"@return" : {
		"prefix": "RechDoc @return",
		"body": "@return ${1:XXXXXX-XXX} ${0:result description}",
		"description": "RechDoc result"
	},
	"@throws" : {
		"prefix": "RechDoc @throws",
		"body": "@throws ${1:XXXXXX-XXX} ${0:error description}",
		"description": "RechDoc error"
	},
	"@enum" : {
		"prefix": "RechDoc @enum",
		"body": "   @enum ${1:XXXXXX-XXX} ${0:enum description}",
		"description": "RechDoc enum"
	},
	"@optional" : {
		"prefix": "RechDoc @optional",
		"body": "   @optional",
		"description": "RechDoc optional parameter"
	},
	"@default" : {
		"prefix": "RechDoc @default",
		"body": "   @default",
		"description": "RechDoc default value"
	},
	"search" : {
		"prefix": "search",
		"body": [
			"           search all             <Table_name>",
			"              at end",
			"                 ...",
			"              when <condition>",
			"                 next             sentence,",
			"           end-search."
			],
		"description": "Search table"
	},
	"string" : {
		"prefix": "string",
		"body": [
			"string                 ${1:<var1>}, ${2:<var2>},",
			"   delimited by size into ${0:<var>}."
		],
		"description": "string delimited by size"
	},
	"string with pointer" : {
		"prefix": "string",
		"body": [
			"string                 ${1:<var1>}, ${2:<var2>},",
			"   delimited by size into ${2:<var>}",
			"      with pointer     ${0:<ponteiro>.}"
		],
		"description": "string delimited/with pointer"
	},
	"initialize alpha" : {
		"prefix": "initialize",
		"body": [
			"initialize             ${1:<var>}",
			"   replacing           alphanumeric data by spaces."
			],
		"description": "initialize ... replacing alphanumeric"
	},
	"fun length" : {
		"prefix": "fun length",
		"body": "function length (${0:<var>})",
		"description": "Returns an integer equal to the length of the variable specified in argument-1"
	},
	"fun date" : {
		"prefix": "fun date",
		"body": "function current-date",
		"description": "Returns in an integer 9(12) of the current date. Format AAAAMMDDHHMM"
	},
	"fun upper" : {
		"prefix": "fun upper",
		"body": "function upper-case (${0:<var>})",
		"description": "Returns the value of argument-1 in uppercase"
	},
	"fun lower" : {
		"prefix": "fun lower",
		"body": "function lower-case (${0:<var>})",
		"description": "Returns the value of argument-1 in lowercase"
	},
	"fun mod" : {
		"prefix": "fun mod",
		"body": "function mod (${0:<var>})",
		"description": "Returns the rest of the division between argument-1 and argument-2"
	},
	"fun integer" : {
		"prefix": "fun integer",
		"body": "function integer (${0:<var>})",
		"description": "Returns the largest integer value before argument-1"
	},
	"fun comp" : {
		"prefix": "fun comp",
		"body": "function when-compiled",
		"description": "Returns date and time that the program was compiled. Format YYYYMMDDHHMMSSCC-TIMEZONE"
	},
	"fun numval" : {
		"prefix": "fun numval",
		"body": "function numval (${0:<var>})",
		"description": "Returns a numeric value for the alphanumeric value of argument-1"
	},
	"fun log10" : {
		"prefix": "fun log10",
		"body": "function log10 (${0:<var>})",
		"description": "Returns an approximate numeric value for the base-10 logarithm of argument-1"
	},
	"fun rem" : {
		"prefix": "fun rem",
		"body": "function rem (${0:<var>})",
		"description": "returns a numeric value that is the remainder of argument-1 divided by argument-2"
	},
	"fun abs" : {
		"prefix": "fun abs",
		"body": "function abs (${0:<var>})",
		"description": "Returns the absolute (integer) value of argument-1"
	},
	"fun sqrt" : {
		"prefix": "fun sqrt",
		"body": "function sqrt (${0:<var>})",
		"description": "Returns the square root of argument-1"
	}
}